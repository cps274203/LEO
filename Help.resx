<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>Release LEO.00.02

/msbuild/dev/chsingh/LEO/LEO.00.01/LEO.00.02.tar.gz

What's New:-
1-	Detailed per DSP analysis for Slip, Super, MaxBurst, BurstSlippedExceedLimit, LostCmdsCPDSP, LostCmdsDSPCP , NonDecodedAudioFrames JitterBufFramesDropped, MaxVideoFrameDrop, NonDecodedVideoFrames, DroppedVideoPacket and AvgVideoFrameDrop using syslogs.
2-	Detailed statistics reporting for Max Frames Dropped (HC Video) ,Super Slipped Cycle Count (Audio)  ,Super Slipped Cycle Count (Video) ,Super Slipped Cycle Count (HC Video) ,Max Burst Slip Cycles (Audio) ,Max Burst Slip Cycles (Video)  ,Max Burst Slip Cycles (HC Video)  ,Burst Slip Cycles Exceed Limit (HC Video) ,Dropped Video Packets ,Jitter Buffer Frames Dropped  ,Non Decoded Video Frames and Non Decoded Audio Frames using statistics file. LEO will not show any decision for statistics report as these data are cumulative result of multiple DSP. 
3-	Enhancement for H.248 Load test analysis and result upload.(For Wayanad project-Not tested yet)
4-	Hung Call Count analysis.
5-	Reading the project names from a Database.
6-	Update of SNMP module function to get core allocation for SWMS if configured core allocation cannot retrieved from syslog.
7-	Update of top calculation logic.
8-	Addition of New platform for Paris



How to Use this tool:

Copy the below files to any of your directory from 
/msbuild/dev/chsingh/LEO/LEO.xx.yy/LEO.xx.yy.tar.gz

1-Load_Effort_Optimisation.exe
2-ICSharpCode.SharpZipLib.dll
3-SnmpSharpNet.dll

ex-(E:\Radisys\MS_DV\Project\LEO)

Copy all the syslogs(*.log), MS statistics(statistics*), AT output file(at_output*) and top command output(top.txt) under the above folder.


Double click on Load_Effort_Optimisation.exe. A Windows form will appear on your screen with Overall report summary. Overall report(comment.txt) will be created in your current directory. You can edit comment.txt file if some addition information/load model specific data needs to added before upload.

you can navigate to below tabs and see the required results in details for the load test.

Memory analysis:
                Overall memory graph
                CP/SCRM Usage graph
                DSP Usage graph
                SE usage graph
                OAMP Usage graph
                VXML usage graph
Syslog analysis:
                Load modelling analysis
                Error/Warning analysis
                Slip cycles
                Load modeling In Details
Statistics analysis:
                RTP packet loss
                DSP Utilization analysis
Report:
                Overall report
                Submit load results

(when you click Submit_to_LOAD_DB button, This tool will create an archived in gunzip tar format(archive.tar.gz) of current directory and upload to LOAD DV using HTTP POST method.)

Note: please delete unnecessary logs and have only the logs which you need to analyze in the folder.</value>
  </data>
</root>